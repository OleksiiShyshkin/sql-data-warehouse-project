-- Exploratory Data Analysis
-----------------------------------------------------------------
-- Database Exploration
-----------------------------------------------------------------

-- Explore All Objects in the Database
SELECT *
FROM INFORMATION_SCHEMA.TABLES;

-- Explore All Columns in the Database
SELECT *
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers';

-----------------------------------------------------------------
-- Dimension Exploration
-----------------------------------------------------------------

-- Explore All Countries our customers come from
SELECT DISTINCT 
    country 
FROM gold.dim_customers;

-- Explore All Categories "The major Divisions"
SELECT DISTINCT 
    category,
    subcategory,
    product_name
FROM gold.dim_products
ORDER BY category, subcategory, product_name;

-----------------------------------------------------------------
-- Date Exploration
-----------------------------------------------------------------

-- Find the date of the first and last order
-- How many years of sales are available
SELECT
    MIN(order_date) AS first_order_date,
    MAX(order_date) AS last_order_date,
    DATEDIFF(year, MIN(order_date), MAX(order_date)) AS order_range_years
FROM gold.fact_sales;

-- Find the youngest and the oldest customer
SELECT
    DATEDIFF(year, MIN(birthday), GETDATE()) AS oldest_customer,
    DATEDIFF(year, MAX(birthday), GETDATE()) AS youngest_customer
FROM gold.dim_customers;

-----------------------------------------------------------------
-- Measures Exploration
-----------------------------------------------------------------

-- Find the Total Sales, Total Items Sold, Average Selling Price, Total Orders, and Total Customers
SELECT
    SUM(sales_amount) AS total_sales_amount,
    SUM(quantity) AS total_item_quantity,
    AVG(price) AS avg_price,
    COUNT(DISTINCT order_number) AS total_orders,
    COUNT(DISTINCT customer_key) AS customers_number
FROM gold.fact_sales;

-- Find the total number of products
SELECT
    COUNT(DISTINCT product_key) AS products_number
FROM gold.dim_products;

-- Find the total number of customers
SELECT
    COUNT(DISTINCT customer_key) AS customers_number
FROM gold.dim_customers;

-- Find the total number of customers that have placed an order
SELECT
    COUNT(DISTINCT customer_key) AS customers_number
FROM gold.fact_sales;

-- Generate a Report that shows all key metrics of the business
SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Item Quantity', SUM(quantity) FROM gold.fact_sales
UNION ALL
SELECT 'Average Price', AVG(price) FROM gold.fact_sales
UNION ALL
SELECT 'Total Orders', COUNT(DISTINCT order_number) FROM gold.fact_sales
UNION ALL
SELECT 'Total Products', COUNT(DISTINCT product_key) FROM gold.dim_products
UNION ALL
SELECT 'Total Customers', COUNT(DISTINCT customer_key) FROM gold.fact_sales;

-----------------------------------------------------------------
-- Magnitude Analysis
-----------------------------------------------------------------

-- Find total customers by countries
SELECT
    country,
    COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC;

-- Find total customers by gender
SELECT
    gender,
    COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC;

-- Find total products by category
SELECT
    category,
    COUNT(product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC;

-- What is the average cost in each category?
SELECT
    category,
    AVG(cost) AS avg_cost
FROM gold.dim_products
GROUP BY category
ORDER BY avg_cost DESC;

-- What is the total revenue generated for each category?
SELECT
    dm.category,
    SUM(fs.sales_amount) AS total_revenue
FROM gold.fact_sales fs
LEFT JOIN gold.dim_products dm ON fs.product_key = dm.product_key
GROUP BY dm.category
ORDER BY total_revenue DESC;

-- Find total revenue generated by each customer
SELECT
    dc.customer_key,
    dc.first_name,
    dc.last_name,
    SUM(fs.sales_amount) AS total_revenue
FROM gold.fact_sales fs
LEFT JOIN gold.dim_customers dc ON fs.customer_key = dc.customer_key
GROUP BY dc.customer_key, dc.first_name, dc.last_name
ORDER BY total_revenue DESC;

-- What is the distribution of sold items across countries?
SELECT
    dc.country,
    SUM(fs.quantity) AS total_items
FROM gold.fact_sales fs
LEFT JOIN gold.dim_customers dc ON fs.customer_key = dc.customer_key
GROUP BY dc.country
ORDER BY total_items DESC;

-----------------------------------------------------------------
-- Ranking Analysis
-----------------------------------------------------------------

-- Which 5 products generate the highest revenue?
SELECT TOP 5
    dm.product_name,
    SUM(fs.sales_amount) AS total_revenue
FROM gold.fact_sales fs
LEFT JOIN gold.dim_products dm ON fs.product_key = dm.product_key
GROUP BY dm.product_name
ORDER BY total_revenue DESC;

-- Using ROW_NUMBER for Top 5 products
SELECT *
FROM (
    SELECT
        dm.product_name,
        SUM(fs.sales_amount) AS total_revenue,
        ROW_NUMBER() OVER (ORDER BY SUM(fs.sales_amount) DESC) AS rank_product
    FROM gold.fact_sales fs
    LEFT JOIN gold.dim_products dm ON fs.product_key = dm.product_key
    GROUP BY dm.product_name
) t
WHERE rank_product <= 5;

-- What are the 5 worst-performing products in terms of sales?
SELECT TOP 5
    dm.product_name,
    SUM(fs.sales_amount) AS total_revenue
FROM gold.fact_sales fs
LEFT JOIN gold.dim_products dm ON fs.product_key = dm.product_key
GROUP BY dm.product_name
ORDER BY total_revenue ASC;

-- Find the top 10 customers who have generated the highest revenue
SELECT TOP 10
    dc.customer_key,
    dc.first_name,
    dc.last_name,
    SUM(fs.sales_amount) AS total_revenue
FROM gold.fact_sales fs
LEFT JOIN gold.dim_customers dc ON fs.customer_key = dc.customer_key
GROUP BY dc.customer_key, dc.first_name, dc.last_name
ORDER BY total_revenue DESC;

-- The 3 customers with the fewest orders placed
SELECT TOP 3
    dc.customer_key,
    dc.first_name,
    dc.last_name,
    COUNT(DISTINCT fs.order_number) AS total_orders
FROM gold.fact_sales fs
LEFT JOIN gold.dim_customers dc ON fs.customer_key = dc.customer_key
GROUP BY dc.customer_key, dc.first_name, dc.last_name
ORDER BY total_orders ASC;
